#!/usr/bin/env perl
# This program will go through the pmap output and create a gnuplot datafile
# to perform memory usage measurements.
#
# run as root for pmap to work

use strict;
use warnings;
use Getopt::Long;

my $requestedpid = 0;
my $sortbyheap = 0;
my $sortbystack = 0;
my $sortbytext = 0;
my $sortbydata = 0;
my $sortbyrss = 0;
my $pmapfile = "";
my $libsortby = 'text'; # default sort order
my $appsortby = 'heap'; # default sort order
my $numbytes = 8;


#my $lib_regexp=/^\d{8,8}\s+?(\d+?\s+?){3,3}[rwx-]{5,5}.*\.so.*/;
#my $pmapline=qr/^([\dabcdef]{$numbytes})\s+?([\d-]+?)\s+?([\d-]+?)\s+?([\d-]+?)\s+?([rwx-]{5})\s+(.*)$/; # for normal pmap
my  $pmapline=qr/^([\dabcdef]{$numbytes})\s+?([\d-]+?)\s+?([\d-]+?)\s+?([\d-]+?)\s+?([\d-]+?)\s+?([rwx-]{5})\s+(.*)$/; # for busybox pmap
my $lib=qr/\.so/;
my $stack=qr/\[\s+stack\s+\]/;
my $anon=qr/\[\s+anon\s+\]/;

my %libraries;
my %applications;

GetOptions ( "pid=i" => \$requestedpid, "heap" => \$sortbyheap, "stack" => \$sortbystack, "text" => \$sortbytext, "data" => \$sortbydata, "rss" => \$sortbyrss, "file=s" => \$pmapfile );

if ($requestedpid ne 0) {
	open (FILE, "pmap -x $requestedpid |") || die "no pmap";
}
elsif ($pmapfile ne ""){
    open (FILE, "< $pmapfile") || die "no pmap file: $!";
}
else {
	open (FILE, "pmap -x /proc/* |") || die "no pmap";
}

$pmapfile ne "" and `uname -p` =~ "x86_64" and $numbytes=16;

$sortbyheap == 1 and $appsortby = 'heap';
$sortbystack == 1 and $appsortby = 'stack';

$sortbytext == 1 and $libsortby = 'text';
$sortbydata == 1 and $libsortby = 'data';
$sortbyrss == 1 and $libsortby = 'rss';

while(<FILE>){
	if (/^(\d+):\s+(.*)/ .. /^total kB/){
		my %apprecord;
		my $pid = $1;
		my $appfull = $2;
		# the second match in the if statement above matches on the last line
		# this causes the first match to disappear (undefining $1 and $2)

		# skip kernel threads
		defined $pid and ($appfull =~ /^\[.*\]$/) and next;

		defined $pid and $applications{ $pid }{ 'name' } = $appfull;

		# prot_none pages can be dropped as they don't take up physical memory
		if ($_ =~ $pmapline){
			my $address = $1;
			my $size = $2;
			my $rss = $3;
			my $dirty = $4;
            my $locked = $5;
			my $mode = $6;
			my $name = $7;

			if ($name =~ $lib){
				if($mode eq 'r-x--'){ $libraries{ $name }{'text'}=$size;}
				if($mode eq 'rw---'){ $libraries{ $name }{'data'}=$size;} # should be heap of this process
				if($mode eq 'r----'){ $libraries{ $name }{'rss'}=$size;}
			}
			elsif ($name =~ $stack){
				$applications{ $pid }{ 'stack' } += $size;
			}
			elsif ($name =~ $anon){
				$applications{ $pid }{ 'heap' } += $size;
			}
			else {
				# other libtypes, i.e. locale-archive
				if($mode eq 'r-x--'){ $libraries{ $name }{'text'}=$size;}
				if($mode eq 'rw---'){ $libraries{ $name }{'data'}=$size;} # should be heap of this process
				if($mode eq 'r----'){ $libraries{ $name }{'rss'}=$size;}
			}
		}
	}
}

for my $libra ( keys %libraries ) {
	if (!defined $libraries{$libra}{'text'})
	{
		$libraries{$libra}{'text'} = 0;
	}

	if (!defined $libraries{$libra}{'data'})
	{
		$libraries{$libra}{'data'} = 0;
	}

	if (!defined $libraries{$libra}{'rss'})
	{
		$libraries{$libra}{'rss'} = 0;
	}
}

for my $libra ( sort { $libraries{$a}{$libsortby} <=> $libraries{$b}{$libsortby} } keys %libraries ) {
	printf("%-60.60s:", $libra);

	for my $segment ( sort {$a cmp $b} keys %{ $libraries{$libra} } )
	{
		printf("%4s=%8d ", $segment, $libraries{$libra}{$segment});
	}
	print "\n";
}

for my $appl( sort {$applications{$a}{$appsortby} <=> $applications{$b}{$appsortby}} keys %applications ) {
	printf("%-8d: ", $appl);
	printf("% 50.50s:", $applications{$appl}{'name'});
	printf("%4s=%8.8s ", 'heap', $applications{$appl}{'heap'});
	printf("%5s=%8.8s ", 'stack', $applications{$appl}{'stack'});
	print "\n";
}
