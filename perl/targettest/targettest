#!/usr/bin/perl
#
use warnings;
use strict;
use Getopt::Long;
use Net::Ping;
use Net::FTP;
use Net::SSH qw(ssh_cmd);

my $the_target = "";
my $location = "";
my $files_to_target = "";
my $result_files = "";
my $files_from_target = "";
my $user = "";
my $password = "";
my $commands = "";
my $DEBUG=undef;

my %targetlist=(
	"target" => 0,
	"target2" => 0,
	"target3" => 0,
	"target4" => 0
	);

my %Options = ( "filestotarget" => \$files_to_target, "resultfiles" => \$result_files, "filesfromtarget" => \$files_from_target, "user" => \$user, "password" => \$password, "location" => \$location, "commands" => \$commands);

sub usage()
{
	print "$0\n";
	print "Please define the following options:\n";
	print "\t--location=\"location\"\n";
	print "\t--commands=\"a,comma,separated,list\"\n";
	print "\t--filestotarget=\"a,comma,separated,list\"\n";
	print "\t--resultfiles=\"a,comma,separated,list\"\n";
	print "\t--filesfromtarget=\"a,comma,separated,list\"\n";
	print "\t--user=\"a,comma,separated,list\"\n";
	print "\t--password=\"a,comma,separated,list\"\n";

	exit(1);
}

sub selecttarget()
{
	# ping list of possible targets
	my $p = Net::Ping->new("tcp");

	while( my ($k, $v) = each %targetlist ) 
	{
		defined $DEBUG and print "Pinging target \"$k\".\n";
		if ($p->ping($k,2)) {
			$targetlist{$k} = 1;
			$the_target = $k;
			defined $DEBUG and print "Using target $the_target.\n";
			last;
		} 
		else {
			defined $DEBUG and print "Could not reach \"$k\", trying next target.\n";
		}
		sleep(1);
	}
	$p->close();
}

sub putfilesontarget()
{
	my $ftp = Net::FTP->new($the_target, Debug => 0) or die "Cannot connect to $the_target: $@";
	$ftp->login($user,$password) or die "Cannot login ", $ftp->message;
	$ftp->cwd($location) or die "Cannot change working directory ", $ftp->message;

	foreach (split(/,/,$files_to_target))
	{
        defined $DEBUG and print "Putting $_ on $the_target\n";
		$ftp->put($_) or die "put failed ", $ftp->message;
	}
	$ftp->quit;
}

sub runtest()
{
	# ssh to perform test
	foreach (split(/,/,$commands))
	{
		print "Running $_ on $the_target\n";

		my @sshoutput=ssh_cmd( { user => $user,
				      host => $the_target,
				      command => $_ });
		print @sshoutput;
	}
}

sub collectresults()
{
	my $ftp = Net::FTP->new($the_target, Debug => 0) or die "Cannot connect to $the_target: $@";
	$ftp->login($user,$password) or die "Cannot login ", $ftp->message;
	$ftp->cwd($location) or die "Cannot change working directory ", $ftp->message;

	foreach (split(/,/,$result_files))
	{
		defined $DEBUG and print "Getting $_ off the target\n";
		$ftp->get($_) or die "get failed ", $ftp->message;
		#TODO: check to delete
	}
	$ftp->quit;
}

sub cleanuptarget()
{
	my $ftp = Net::FTP->new($the_target, Debug => 0) or die "Cannot connect to $the_target: $@";
	$ftp->login($user,$password) or die "Cannot login ", $ftp->message;
	$ftp->cwd($location) or die "Cannot change working directory ", $ftp->message;

	foreach (split(/,/,$files_from_target))
	{
		defined $DEBUG and print "Removing $_ off the target\n";
		$ftp->delete($_) or warn "delete failed ", $ftp->message;
	}
	$ftp->quit;

}

# MAIN ###################################################################################
# collect list of files to put on target
# collect list of files to save from target
# collect list of files to remove from target
# an ftp user + password
GetOptions(\%Options, "filestotarget:s", "resultfiles:s", "filesfromtarget:s", "location:s", "commands=s", "user=s", "password=s") or die "Failed to retrieve correct options";
$files_from_target eq "" and $files_to_target ne "" and $files_from_target = $files_to_target;

$user eq "" and usage();
$password eq "" and usage();
$commands eq "" and usage();

selecttarget();
$files_to_target ne "" and putfilesontarget();
runtest();
$result_files ne "" and collectresults();
$files_from_target ne "" and cleanuptarget();

exit(0);
